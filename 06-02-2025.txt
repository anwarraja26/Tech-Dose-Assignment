SINGLE NUMBER 


class Solution {
public:
    int singleNumber(vector<int>& nums) {
        int ans=0;
        for(int i=0;i<nums.size();i++){
            ans^=nums[i];
        }
        return ans;
    }
};

SINGLE NUMBER II

class Solution {
public:
    int singleNumber(vector<int>& nums) {
        int ones = 0, twos = 0;
        for (int num : nums) {
            ones = (ones ^ num) & ~twos;
            twos = (twos ^ num) & ~ones;
        }
        return ones;
    }
};

MAJORITY ELEMENT 


class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int count=0;
        int candidate;
        for(int i=0;i<nums.size();i++){
            if(count==0){
                candidate=nums[i];
            }
            count+=(candidate==nums[i])?1:-1;
        }
        return candidate;
    }
};


BITWISE AND OF NUMBER RANGE

class Solution {
public:
    int rangeBitwiseAnd(int left, int right) {
        int s=0;
        while(left<right){
            left>>=1;
            right>>=1;
            s++;
        }
        return left<<s;
    }
};

COUNTING BITS 

class Solution {
public:
    vector<int> countBits(int n) {
        vector<int>vec;
        for(int i=0;i<=n;i++){
            vec.push_back(__builtin_popcount(i));
        }
        return vec;
    }
};


HAMMING DISTANCE

class Solution {
public:
    int hammingDistance(int x, int y) {
        int xorval=x^y;
        int count=0;
        while(xorval){
            if(xorval&1){
                count++;
            }
            xorval>>=1;
        }
        return count;
    }
};


