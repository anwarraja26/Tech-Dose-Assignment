1. Primilarity Test

#include <iostream>
#include <cmath>
using namespace std;

bool isPrime(int n) {
    if (n <= 1) return false;
    if (n == 2) return true; // 2 is the only even prime number
    if (n % 2 == 0) return false;

    for (int i = 3; i <= sqrt(n); i += 2) {
        if (n % i == 0) return false;
    }
    return true;
}

int main() {
    int num;
    cout << "Enter a number to test primality: ";
    cin >> num;
    
    if (isPrime(num)) {
        cout << num << " is a prime number." << endl;
    } else {
        cout << num << " is not a prime number." << endl;
    }

    return 0;
}

2. Factors of Number N

#include <iostream>
using namespace std;

void printFactors(int n) {
    cout << "Factors of " << n << " are: ";
    for (int i = 1; i <= n; i++) {
        if (n % i == 0) {
            cout << i << " ";
        }
    }
    cout << endl;
}

int main() {
    int num;
    cout << "Enter a number to find its factors: ";
    cin >> num;

    printFactors(num);

    return 0;
}

3.Sieve of Eranthoses

#include <iostream>
#include <vector>
using namespace std;

void sieveOfEratosthenes(int n) {
    vector<bool> isPrime(n + 1, true);
    isPrime[0] = isPrime[1] = false; // 0 and 1 are not prime numbers

    for (int i = 2; i * i <= n; i++) {
        if (isPrime[i]) {
            for (int j = i * i; j <= n; j += i) {
                isPrime[j] = false;
            }
        }
    }

    cout << "Prime numbers up to " << n << " are: ";
    for (int i = 2; i <= n; i++) {
        if (isPrime[i]) {
            cout << i << " ";
        }
    }
    cout << endl;
}

int main() {
    int limit;
    cout << "Enter the upper limit to find primes: ";
    cin >> limit;

    sieveOfEratosthenes(limit);

    return 0;
}


4. Segmented Sieve

#include <iostream>
#include <vector>
#include <cmath>
using namespace std;

void simpleSieve(int limit, vector<int>& primes) {
    vector<bool> isPrime(limit + 1, true);
    isPrime[0] = isPrime[1] = false;

    for (int p = 2; p * p <= limit; p++) {
        if (isPrime[p]) {
            for (int i = p * p; i <= limit; i += p) {
                isPrime[i] = false;
            }
        }
    }

    for (int p = 2; p <= limit; p++) {
        if (isPrime[p]) {
            primes.push_back(p);
        }
    }
}

void segmentedSieve(int L, int R) {
    int limit = sqrt(R) + 1;
    vector<int> primes;
    simpleSieve(limit, primes);

    int n = R - L + 1;
    vector<bool> isPrime(n, true);

    for (int i = 0; i < primes.size(); i++) {
        int lowLim = max(primes[i] * primes[i], (L + primes[i] - 1) / primes[i] * primes[i]);
        for (int j = lowLim; j <= R; j += primes[i]) {
            isPrime[j - L] = false;
        }
    }

    cout << "Prime numbers in range [" << L << ", " << R << "] are: ";
    for (int i = 0; i < n; i++) {
        if (isPrime[i]) {
            cout << i + L << " ";
        }
    }
    cout << endl;
}

int main() {
    int L, R;
    cout << "Enter the range (L R) to find primes: ";
    cin >> L >> R;

    segmentedSieve(L, R);

    return 0;
}




